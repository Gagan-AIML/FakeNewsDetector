# -*- coding: utf-8 -*-
"""FakeNewsDetector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wF6y27PIk5EfuKesjq7JxdsqxSSYUR7R
"""

import pandas as pd
import numpy as np
import tensorflow as tf

df=pd.read_csv('/content/Fake_Real_Data.csv')

df.head(5)

df.isna().sum()

df.duplicated().sum()

df['label'].value_counts()

df['label']=df['label'].map({'Fake': 0,'Real': 1})

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

t=Tokenizer(num_words=5000,oov_token='<OOV>')
t.fit_on_texts(df['Text'])
seq = t.texts_to_sequences(df['Text'])

x=pad_sequences(seq,maxlen=100)

y=np.array(df['label'])

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)

vocab_size = min(5000, len(t.word_index) + 1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Dense, LSTM
from sklearn.model_selection import train_test_split

model = Sequential([
    Embedding(input_dim=vocab_size, output_dim=64, input_length=200),
    LSTM(32, return_sequences=True),
    LSTM(32),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

import spacy

nlp=spacy.load("en_core_web_sm")

def preprocess_text_spacy(text):
    doc = nlp(text.lower())
    tokens = [token.lemma_ for token in doc if token.is_alpha and not token.is_stop]
    return " ".join(tokens)

def classify(news):
    seq = t.texts_to_sequences([news])
    padded = pad_sequences(seq, maxlen=200)
    pred = model.predict(padded)[0][0]
    if pred > 0.5:
        print('Real')
    else:
        print('Fake')

def predict_fake_news(news):
    cleaned_text = preprocess_text_spacy(news)
    seq = t.texts_to_sequences([cleaned_text])
    padded = pad_sequences(seq, maxlen=200)
    prediction = model.predict(padded)[0][0]
    label = "Real" if prediction >= 0.5 else "Fake"
    return label

sample1 = """At least four persons were killed and dozens feared washed away in Uttarkashi district of Uttarakhand after flash floods triggered by torrential rain hit the Kheer Ganga river on Tuesday afternoon."""
sample2 = """NASA confirms water found on the Moon's surface again!"""

classify(sample1)

predict_fake_news(sample2)

